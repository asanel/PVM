@page "/abwesenheitsplan"
@using System
@using System.Data
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Collections.Generic;
@using Newtonsoft.Json;


@inject NavigationManager NavigationManager



<div style="padding-bottom:20px">

<div class="tabs">
    
    @if(!IsTeamAbsences)
    {
        <button @onclick="MyAbsences" class="tab selected">Meine </button>
        <button @onclick="TeamAbsences" class="tab">Kollegen</button>
    }
    else
    {
        <button @onclick="MyAbsences" class="tab">Meine </button>
        <button @onclick="TeamAbsences" class="tab selected">Kollegen</button>
    }
</div>
<div>

    <button @onclick="@(m => ClickMonthNavigate(1))"> + </button>
    <button @onclick="@(m => ClickMonthNavigate(-1))">- </button>
    <input type="date" @bind="today" />
</div>

<CalendarContainer   FirstDate="today" DisplayedView="DisplayedView.Monthly" TasksList="TasksList.ToArray()">
    <MonthlyView   />
</CalendarContainer>

<div class="filter-section">
    <label>Filter</label>
    <select @bind="colum" >
        <option value="Ersteller">Ersteller</option>
        <option value="Genehmiger">Genehmiger</option>
        <option value="Anfangsdatum">Anfangsdatum</option>
        <option value="Enddatum">Enddatum</option>
        <option value="Typ">Typ</option>
        <option value="Status">Status</option>
        <option value="ErstellDatum">ErstellDatum</option>
    </select>
    <select @bind="filter">
        <option value="ist">ist</option>
        <option value="Beginnt mit">Beginnt mit</option>
        <option value="Beinhaltet">Beinhaltet</option>
    </select>
    <input @bind="value" type="text" />
    <button @onclick="ApplyFilter">Anwenden</button>
    <button @onclick="ResetFilter">Zurücksetzen</button>
</div>
<label>Aktueller Filter: @appliedFilter</label>
<br />
<div>
    <button @onclick="NavigateToNewAbsence"> Neue Abwesenheit </button>
</div>


<table class="absence-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Von</th>
            <th>Bis</th>
            <th>Typ</th>
            <th>Status</th>
        </tr>
    </thead>
    
    <tbody>
        @foreach (var entry in absenceEntries)
        {
            <tr @onclick="@(m => ClickMonthNavigate(1))">
                <td>@entry.Name</td>
                <td>@entry.StartDate.ToShortDateString()</td>
                <td>@entry.EndDate.ToShortDateString()</td>
                <td>@entry.Type</td>
                <td>@entry.Status</td>
            </tr>
        }
    </tbody>
  



</table>

</div>


@code {
    private List<Tasks> TasksList = new List<Tasks> {};
    private int months = 12;
    private DateTime today = DateTime.Today;

    private DateTime? filterFromDate;
    private string filterCriteria = "is";
    private DateTime? filterDate = DateTime.Today;


    public bool IsTeamAbsences;

    public string colum = "";
    public string filter = "";
    public string value = "";
    public string appliedFilter = "";


    void ClickMonthNavigate(int Months)
    {
        
        today = today.AddMonths(Months);
    }

    void NavigateToNewAbsence()
    {
        NavigationManager.NavigateTo("/neueabwesenheit");
    }

    // void UpdateAbsenceEntires(HttpResponseMessage response)
    // {
    //     absenceEntries.Clear();
    //     DataTable dataTable = new DataTable();
    //     if (response.IsSuccessStatusCode)
    //     {
    //         var dataObjects = response.Content.ReadAsStringAsync().Result;
    //         var result = response.Content.ReadAsStringAsync().Result;
    //         dataTable = JsonConvert.DeserializeObject<DataTable>(result);

    //     }
    //     else
    //     {
    //         Console.WriteLine("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase);
    //     }
    //     DataRow drCreator;
    //     DataRow drApprover;
        
    //     foreach (DataRow row in dataTable.Rows)
    //     {


    //         response = client.GetAsync("GetAccount/" + row.Field<Int64>("Ersteller").ToString()).Result;
    //         if (response.IsSuccessStatusCode)
    //         {
    //             var dataObjects = response.Content.ReadAsStringAsync().Result;
    //             var result = response.Content.ReadAsStringAsync().Result;
    //             drCreator = JsonConvert.DeserializeObject<DataTable>(result).Rows[0];
    //         }
    //         else
    //         {
    //             drCreator = null;
    //             Console.WriteLine("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase);
    //         }
    //         response = client.GetAsync("GetAccount/" + row.Field<Int64>("Genehmiger").ToString()).Result;
    //         if (response.IsSuccessStatusCode)
    //         {
    //             var dataObjects = response.Content.ReadAsStringAsync().Result;
    //             var result = response.Content.ReadAsStringAsync().Result;
    //             drApprover = JsonConvert.DeserializeObject<DataTable>(result).Rows[0];
    //         }
    //         else
    //         {
    //             drApprover = null;
    //             Console.WriteLine("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase);
    //         }



    //         absenceEntries.Add(new AbsenceEntry
    //             {
    //                 Type = row.Field<string>("Typ"),
    //                 Name = drCreator.Field<string>("Name"),
    //                 Id = Convert.ToInt32(row.Field<Int64>("AbwesenheitsantragID")),
    //                 StartDate = row.Field<DateTime>("Anfangsdatum"),
    //                 EndDate = row.Field<DateTime>("Enddatum"),
    //                 Duration = 3,
    //                 Status = row.Field<string>("Status"),
    //                 Employee = new Employee
    //                 {
    //                     Id = Convert.ToInt32(drCreator.Field<Int64>("KontoID")),
    //                     Lastname = drCreator.Field<string>("Name"),
    //                 },
    //                 Manager = new Manager
    //                 {
    //                     Id = Convert.ToInt32(drApprover.Field<Int64>("KontoID")),
    //                     Lastname = drApprover.Field<string>("Name")
    //                 }
    //             });

    //     }
    // }
    void UpdateTasks()
    {
        TasksList.Clear();
        foreach (AbsenceEntry Data in absenceEntries)
        {
            TasksList.Add(new Tasks { ID = Convert.ToInt32(Data.Id), DateStart = Data.StartDate, DateEnd = Data.EndDate, Code = Data.Name, Color = "#19C319", Caption = "Lorem ipsum dolor sit amet" });
        }
    }

    void SomeStartupMethod()
    {



        // HttpResponseMessage response = client.GetAsync("GetAbsenceEntries/"+LoggedUser.Id).Result;
        // UpdateAbsenceEntires(response);

        // UpdateTasks();

    }

    Task SomeStartupTask()
    {
        // Do some task based work
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {


        SomeStartupMethod();
        await SomeStartupTask();
    }




    private List<AbsenceEntry> absenceEntries = new List<AbsenceEntry>
    {
        //test
    };
    private void ApplyFilter()
    {

        // try
        // {
        //     appliedFilter = colum + " " + filter + " " + value;

        //     HttpResponseMessage response = client.GetAsync("GetAbsenceEntriesByFilter?Creator=" + LoggedUser.Id + "&Column=" + colum + "&Filter=" + filter + "&Value=" + value).Result;
        //     UpdateAbsenceEntires(response);
        //     UpdateTasks();

        // }
        // catch
        // {
        //     Console.WriteLine("Error");
        // }
    }
    private void ResetFilter()
    {
        // appliedFilter = "";
        // HttpResponseMessage response = client.GetAsync("GetAbsenceEntries/" + LoggedUser.Id).Result;
        // UpdateAbsenceEntires(response);
        // UpdateTasks();

    }

    private void MyAbsences()
    {

        // IsTeamAbsences = false;

        // HttpResponseMessage response = client.GetAsync("GetAbsenceEntries/" + LoggedUser.Id).Result;  // Blocking call! Program will wait here until a response is received or a timeout occurs.
        // UpdateAbsenceEntires(response);
        // UpdateTasks();


    }
    private void TeamAbsences()
    {
        // IsTeamAbsences = true;
        // HttpResponseMessage response = client.GetAsync("GetTeamAbsenceEntries?Team=" + LoggedUser.Department.Id).Result;  // Blocking call! Program will wait here until a response is received or a timeout occurs.
        // UpdateAbsenceEntires(response);
        // UpdateTasks();
        //SQL Abfrage hier senden:
        // Select * From Abwesenheitsanträge
        // Where Ersteller = (Select KontoID From Personaldaten Where Abteilung = (Select Abteilung From Personaldaten Where KontoID = (ID des aktuellen Kontos)))
    }

}

<style>
    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .tab {
        padding: 5px 10px;
        border: 1px solid #ddd;
        cursor: pointer;
    }

        .tab.selected {
            background-color: #f2dede;
        }

    .calendar-placeholder {
        height: 200px;
        border: 1px solid #ddd;
        margin: 10px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888;
    }

    .filter-section {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }

        .filter-section input[type="date"], .filter-section select {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

    .absence-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .absence-table th, .absence-table td {
            padding: 8px;
            border: 1px solid #ddd;
            text-align: left;
        }
</style>

