@page "/abwesenheitsplan"
@using System
@using System.Data
@using System.Collections.Generic;
@using BlazorCalendar
@using BlazorCalendar.Models;
@using Newtonsoft.Json;
@using PVM.Client.Service.Repository;


@inject NavigationManager NavigationManager
@inject IAccountRepository accountService;
@inject IEntryRepository entryService;

@inject AuthenticationStateProvider AuthenticationStateProvider



<div style="padding-bottom:20px">

    <!-- Tabs -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button class="nav-link @(activeTab ? "active" : "")" @onclick="() => SwitchTab(true)">
                Meine
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(!activeTab ? "active" : "")" @onclick="() => SwitchTab(false)">
                Kollegen
            </button>
        </li>
    </ul>
    <!-- Kalender -->
    <CalendarContainer FirstDate="currentDate" DisplayedView="DisplayedView.Monthly" TasksList="TasksList.ToArray()">
        <MonthlyView />
    </CalendarContainer>


    <br />
    <div>
        <button @onclick="NavigateToNewAbsence"> Neue Abwesenheit </button>
    </div>


    <table class="absence-table">
        <thead>
            <tr>
                <th>Von</th>
                <th>Bis</th>
                <th>Typ</th>
                <th>Status</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var entry in absenceEntries)
            {
                <tr @onclick="@(m => ClickMonthNavigate(1))">
                    <td>@entry.StartDate.ToShortDateString()</td>
                    <td>@entry.EndDate.ToShortDateString()</td>
                    <td>@entry.Type</td>
                    <td>@entry.Status</td>
                </tr>
            }
        </tbody>




    </table>

</div>


@code {
    private List<AbsenceEntry> absenceEntries = new List<AbsenceEntry>();
    private List<Tasks> TasksList = new List<Tasks> {};
    private bool activeTab = true;
    private DateTime StartDate = DateTime.Today.AddMonths(-1);
    private DateTime EndDate = DateTime.Today.AddMonths(1);

    private int months = 12;
    private DateTime currentDate = DateTime.Today;

    public bool IsTeamAbsences;


    private async Task SwitchTab(bool status)
    {
        activeTab = status;
        await LoadTabData();
    }

    void UpdateTasks()
    {
        TasksList.Clear();
        foreach (AbsenceEntry Data in absenceEntries)
        {
            if(Data.Status == "Genehmigt"){
                TasksList.Add(new Tasks { ID = Convert.ToInt32(Data.Id), DateStart = Data.StartDate, DateEnd = Data.EndDate, Code = Data.Type, Color = "#19C319", Caption = "test" });
            }
            
        }
    }

    void ClickMonthNavigate(int Months)
    {

        currentDate = currentDate.AddMonths(Months);
    }

    void NavigateToNewAbsence()
    {
        NavigationManager.NavigateTo("/eintraege");
    }



    protected override async Task OnInitializedAsync()
    {
        await LoadTabData();
    }
    private async Task LoadTabData()
    {
        if (activeTab == true)
        {
            var employeeId = await GetCurrentUserId();
            absenceEntries = await entryService.GetAllAbsenceEntriesByEmployeeIdAsync(employeeId);
            UpdateTasks();
        }
        else if (activeTab == false)
        {
            absenceEntries = await entryService.GetAllAbsenceEntriesAsync();
            UpdateTasks();
        }
    }

    private async Task<int> GetCurrentUserId()
    {
        int employeeId = 0;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            // Sende die GET-Anfrage und prüfe auf Erfolg
            Employee response = await accountService.GetEmployeeByUserIdAsync(userId);
            if (response != null)
            {
                employeeId = response.Id;

            }
        }
        return employeeId;
    }

}

<style>
    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .tab {
        padding: 5px 10px;
        border: 1px solid #ddd;
        cursor: pointer;
    }

        .tab.selected {
            background-color: #f2dede;
        }

    .calendar-placeholder {
        height: 200px;
        border: 1px solid #ddd;
        margin: 10px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888;
    }

    .filter-section {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }

        .filter-section input[type="date"], .filter-section select {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

    .absence-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .absence-table th, .absence-table td {
            padding: 8px;
            border: 1px solid #ddd;
            text-align: left;
        }
</style>

